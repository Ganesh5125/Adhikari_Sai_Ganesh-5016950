Understand Sorting Algorithms:
1.Bubble Sort:
Description: A simple comparison-based algorithm. Repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until the list is sorted.
Time Complexity:
Best Case: O(n) - When the array is already sorted.
Average Case: O(n^2)
Worst Case: O(n^2)
2.Insertion Sort:
Description: Builds the final sorted array one item at a time. It picks the next element and inserts it into the correct position within the sorted part of the array.
Time Complexity:
Best Case: O(n) - When the array is already sorted.
Average Case: O(n^2)
Worst Case: O(n^2)
3.Quick Sort:
Description: A divide-and-conquer algorithm. It selects a 'pivot' element and partitions the array into two sub-arrays, according to whether elements are less than or greater than the pivot. It then recursively sorts the sub-arrays.
Time Complexity:
Best Case: O(n log n)
Average Case: O(n log n)
Worst Case: O(n^2) - Occurs when the pivot is the smallest or largest element every time (can be mitigated by using randomized or median-of-three pivot selection).
4.Merge Sort:
Description: Another divide-and-conquer algorithm. It divides the array into two halves, sorts them, and then merges the sorted halves.
Time Complexity:
Best Case: O(n log n)
Average Case: O(n log n)
Worst Case: O(n log n)